
import React, { useState } from 'react';
import { Button } from "@/components/ui/button";
import { Check, FileDown, Mail, Loader2, Send, AlertTriangle } from 'lucide-react';
import { GlassContainer } from '@/components/ui/glass-effects';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { toast } from '@/hooks/use-toast';
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import { supabase } from '@/integrations/supabase/client';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";

interface SuccessViewProps {
  selectedForwardersCount: number;
  onCreateAnother: () => void;
  rfqData?: {
    origin: string;
    destination: string;
    weight: string;
    volume: string;
    category: string;
    description?: string;
    requesterName?: string;
    companyName?: string;
    forwarders?: {id: string, name: string}[];
    deadline?: Date;
    reference?: string;
  };
}

const SuccessView: React.FC<SuccessViewProps> = ({
  selectedForwardersCount,
  onCreateAnother,
  rfqData = {}
}) => {
  const [isEmailDialogOpen, setIsEmailDialogOpen] = useState(false);
  const [isTestEmailDialogOpen, setIsTestEmailDialogOpen] = useState(false);
  const [recipientEmail, setRecipientEmail] = useState('');
  const [testEmail, setTestEmail] = useState('');
  const [isSendingEmail, setIsSendingEmail] = useState(false);
  const [isSendingTestEmail, setIsSendingTestEmail] = useState(false);
  const [emailResponse, setEmailResponse] = useState<any>(null);

  const generatePDF = () => {
    const doc = new jsPDF();
    
    doc.setFontSize(18);
    doc.text('Request for Quotation', 105, 15, { align: 'center' });
    
    const reference = rfqData.reference || `RFQ-${Date.now()}`;
    doc.text(`Reference: ${reference}`, 105, 25, { align: 'center' });
    doc.text(`Date: ${new Date().toLocaleDateString()}`, 105, 30, { align: 'center' });
    
    let yPosition = 40;
    
    if (rfqData.requesterName || rfqData.companyName) {
      doc.setFontSize(12);
      doc.text('Requester Details', 14, yPosition);
      
      const requesterDetails = [
        ['Company', rfqData.companyName || 'N/A'],
        ['Name', rfqData.requesterName || 'N/A']
      ];
      
      autoTable(doc, {
        startY: yPosition + 5,
        head: [['Field', 'Value']],
        body: requesterDetails,
        theme: 'grid'
      });
      
      // Fix: Use type assertion for accessing lastAutoTable
      yPosition = (doc as any).lastAutoTable.finalY + 10;
    }
    
    doc.setFontSize(12);
    doc.text('Shipment Details', 14, yPosition);
    
    autoTable(doc, {
      startY: yPosition + 5,
      head: [['Field', 'Value']],
      body: [
        ['Origin', rfqData.origin || 'N/A'],
        ['Destination', rfqData.destination || 'N/A'],
        ['Weight (kg)', rfqData.weight || 'N/A'],
        ['Volume (cbm)', rfqData.volume || 'N/A'],
        ['Category', rfqData.category || 'N/A'],
        ['Description', rfqData.description || 'N/A'],
        ['Deadline', rfqData.deadline ? rfqData.deadline.toLocaleDateString() : 'N/A']
      ],
      theme: 'grid'
    });
    
    // Fix: Use type assertion for accessing lastAutoTable
    yPosition = (doc as any).lastAutoTable.finalY + 10;
    
    if (rfqData.forwarders && rfqData.forwarders.length > 0) {
      doc.text('Selected Forwarders', 14, yPosition);
      
      const forwardersList = rfqData.forwarders.map(f => [f.name]);
      
      autoTable(doc, {
        startY: yPosition + 5,
        head: [['Forwarder']],
        body: forwardersList,
        theme: 'grid'
      });
      
      // Fix: Use type assertion for accessing lastAutoTable
      yPosition = (doc as any).lastAutoTable.finalY + 15;
    } else {
      yPosition += 50;
    }
    
    doc.setFontSize(10);
    doc.text('Generated by DeepCAL Operations Center', 105, yPosition, { align: 'center' });
    
    return doc;
  };

  const handleDownloadPDF = () => {
    const doc = generatePDF();
    const reference = rfqData.reference || `RFQ-${Date.now()}`;
    doc.save(`${reference}.pdf`);
    
    toast({
      title: "PDF Downloaded",
      description: "The RFQ has been downloaded as a PDF document."
    });
  };

  const handleOpenEmailDialog = () => {
    setIsEmailDialogOpen(true);
    setEmailResponse(null);
  };

  const handleOpenTestEmailDialog = () => {
    setIsTestEmailDialogOpen(true);
    setEmailResponse(null);
  };

  const handleSendEmail = async (isTest = false) => {
    const email = isTest ? testEmail : recipientEmail;
    
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      toast({
        title: "Invalid Email",
        description: "Please enter a valid email address",
        variant: "destructive"
      });
      return;
    }
    
    if (isTest) {
      setIsSendingTestEmail(true);
    } else {
      setIsSendingEmail(true);
    }
    
    try {
      const doc = generatePDF();
      const pdfBase64 = doc.output('datauristring').split(',')[1];
      const reference = rfqData.reference || `RFQ-${Date.now()}`;
      
      const { data, error } = await supabase.functions.invoke('send-rfq-email', {
        body: {
          recipientEmail: email,
          pdfBase64,
          rfqReference: reference,
          subject: `Request for Quotation: ${reference}`,
          testMode: isTest
        }
      });
      
      if (error) {
        throw new Error(error.message || 'Failed to send email');
      }
      
      setEmailResponse(data);
      
      toast({
        title: isTest ? "Test Email Sent" : "Email Sent",
        description: `The RFQ has been sent to ${email}`
      });
    } catch (error) {
      console.error('Error sending email:', error);
      setEmailResponse({
        success: false,
        error: error instanceof Error ? error.message : "Failed to send the email. Please try again later."
      });
      
      toast({
        title: "Error",
        description: error instanceof Error ? error.message : "Failed to send the email. Please try again later.",
        variant: "destructive"
      });
    } finally {
      if (isTest) {
        setIsSendingTestEmail(false);
      } else {
        setIsSendingEmail(false);
      }
    }
  };

  return (
    <>
      <GlassContainer className="max-w-4xl mx-auto p-8 mt-8">
        <div className="text-center">
          <div className="mx-auto flex h-16 w-16 items-center justify-center rounded-full bg-green-100 dark:bg-green-900/30">
            <Check className="h-8 w-8 text-green-600 dark:text-green-400" />
          </div>
          <h3 className="mt-4 text-xl font-medium text-[#00FFD1]">RFQ Successfully Created</h3>
          <p className="mt-2 text-sm text-muted-foreground">
            Your request for quotation has been sent to {selectedForwardersCount} forwarders.
            You will be notified when they respond.
          </p>
          <div className="mt-6 flex flex-wrap justify-center gap-4">
            <Button 
              variant="outline" 
              className="border-[#00FFD1]/30 text-[#00FFD1] hover:bg-[#00FFD1]/10"
              onClick={handleDownloadPDF}
            >
              <FileDown className="mr-2 h-4 w-4" />
              Download RFQ
            </Button>
            <Button 
              variant="outline" 
              className="border-[#00FFD1]/30 text-[#00FFD1] hover:bg-[#00FFD1]/10"
              onClick={handleOpenEmailDialog}
            >
              <Mail className="mr-2 h-4 w-4" />
              Email RFQ
            </Button>
            <Button 
              variant="outline" 
              className="border-[#00FFD1]/30 text-[#00FFD1] hover:bg-[#00FFD1]/10"
              onClick={handleOpenTestEmailDialog}
            >
              <Send className="mr-2 h-4 w-4" />
              Send Test Email
            </Button>
            <Button 
              variant="outline" 
              className="border-[#00FFD1]/30 text-[#00FFD1] hover:bg-[#00FFD1]/10"
              onClick={onCreateAnother}
            >
              Create Another RFQ
            </Button>
          </div>
        </div>
      </GlassContainer>

      <Dialog open={isEmailDialogOpen} onOpenChange={setIsEmailDialogOpen}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Send RFQ as PDF</DialogTitle>
          </DialogHeader>
          <div className="py-4">
            <Label htmlFor="email" className="mb-2 block">Recipient Email</Label>
            <Input
              id="email"
              type="email"
              placeholder="recipient@example.com"
              value={recipientEmail}
              onChange={(e) => setRecipientEmail(e.target.value)}
            />
            <p className="text-xs text-muted-foreground mt-2">
              Note: Make sure to check your spam folder if you don't see the email.
            </p>
          </div>
          
          {emailResponse && (
            <Alert variant={emailResponse.success ? "default" : "destructive"} className="my-2">
              <AlertTitle>
                {emailResponse.success 
                  ? "Email Status" 
                  : "Email Error"}
              </AlertTitle>
              <AlertDescription>
                {emailResponse.success 
                  ? emailResponse.message || "Email sent successfully" 
                  : emailResponse.error || "Failed to send email"}
              </AlertDescription>
            </Alert>
          )}
          
          <DialogFooter>
            <Button 
              variant="secondary" 
              onClick={() => setIsEmailDialogOpen(false)}
              disabled={isSendingEmail}
            >
              Close
            </Button>
            <Button 
              onClick={() => handleSendEmail(false)}
              disabled={!recipientEmail || isSendingEmail}
            >
              {isSendingEmail ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Sending...
                </>
              ) : (
                "Send Email"
              )}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      <Dialog open={isTestEmailDialogOpen} onOpenChange={setIsTestEmailDialogOpen}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Send Test RFQ Email</DialogTitle>
          </DialogHeader>
          <div className="py-4">
            <Label htmlFor="test-email" className="mb-2 block">Test Email Address</Label>
            <Input
              id="test-email"
              type="email"
              placeholder="your-email@example.com"
              value={testEmail}
              onChange={(e) => setTestEmail(e.target.value)}
            />
            <p className="text-xs text-muted-foreground mt-2">
              This will send a test email with the RFQ PDF attachment to the provided address.
              Make sure to check your spam folder if you don't receive it.
            </p>
          </div>
          
          {emailResponse && (
            <Alert variant={emailResponse.success ? "default" : "destructive"} className="my-2">
              <AlertTitle className="flex items-center">
                {emailResponse.success 
                  ? <><Check className="h-4 w-4 mr-2" /> Email Status</> 
                  : <><AlertTriangle className="h-4 w-4 mr-2" /> Email Error</>}
              </AlertTitle>
              <AlertDescription>
                {emailResponse.success 
                  ? emailResponse.message || "Email sent successfully" 
                  : emailResponse.error || "Failed to send email"}
              </AlertDescription>
            </Alert>
          )}
          
          <DialogFooter>
            <Button 
              variant="secondary" 
              onClick={() => setIsTestEmailDialogOpen(false)}
              disabled={isSendingTestEmail}
            >
              Close
            </Button>
            <Button 
              onClick={() => handleSendEmail(true)}
              disabled={!testEmail || isSendingTestEmail}
            >
              {isSendingTestEmail ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Sending Test...
                </>
              ) : (
                "Send Test Email"
              )}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </>
  );
};

export default SuccessView;
