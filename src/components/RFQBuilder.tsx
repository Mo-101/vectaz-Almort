
import React, { useState } from 'react';
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Calendar as CalendarIcon, Check, FileDown, Loader2, Mail } from 'lucide-react';
import { Calendar as CalendarComponent } from "@/components/ui/calendar";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog";
import { format } from 'date-fns';
import { cn } from '@/lib/utils';
import { toast } from '@/hooks/use-toast';
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';

interface ForwarderOption {
  id: string;
  name: string;
  reliability: number;
}

interface RFQBuilderProps {
  shipmentData: {
    id: string;
    reference: string;
    origin: string;
    destination: string;
    weight: number;
    volume: number;
    category: string;
  };
  availableForwarders: ForwarderOption[];
  onSubmit: (data: any) => Promise<void>;
}

const RFQBuilder: React.FC<RFQBuilderProps> = ({
  shipmentData,
  availableForwarders,
  onSubmit
}) => {
  const [selectedForwarders, setSelectedForwarders] = useState<string[]>([]);
  const [deadline, setDeadline] = useState<Date | undefined>(
    new Date(Date.now() + 7 * 24 * 60 * 60 * 1000) // Default: 7 days from now
  );
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitted, setSubmitted] = useState(false);
  const [isEmailDialogOpen, setIsEmailDialogOpen] = useState(false);
  const [recipientEmail, setRecipientEmail] = useState('');
  const [isSendingEmail, setIsSendingEmail] = useState(false);

  const handleForwarderToggle = (id: string) => {
    setSelectedForwarders(current => 
      current.includes(id) 
        ? current.filter(fId => fId !== id)
        : [...current, id]
    );
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (selectedForwarders.length === 0 || !deadline) {
      return;
    }
    
    setIsSubmitting(true);
    
    try {
      await onSubmit({
        shipmentId: shipmentData.id,
        forwarderIds: selectedForwarders,
        deadline: format(deadline, 'yyyy-MM-dd'),
        weight: shipmentData.weight,
        volume: shipmentData.volume,
        category: shipmentData.category
      });
      
      setSubmitted(true);
    } catch (error) {
      console.error('Error submitting RFQ:', error);
    } finally {
      setIsSubmitting(false);
    }
  };

  const generatePDF = () => {
    const doc = new jsPDF();
    
    // Add title
    doc.setFontSize(18);
    doc.text('Request for Quotation', 105, 15, { align: 'center' });
    
    // Add reference number
    doc.setFontSize(10);
    doc.text(`Reference: ${shipmentData.reference}`, 105, 25, { align: 'center' });
    doc.text(`Date: ${format(new Date(), 'PPP')}`, 105, 30, { align: 'center' });
    
    // Add shipment details
    doc.setFontSize(12);
    doc.text('Shipment Details', 14, 40);
    
    autoTable(doc, {
      startY: 45,
      head: [['Property', 'Value']],
      body: [
        ['Origin', shipmentData.origin],
        ['Destination', shipmentData.destination],
        ['Weight (kg)', shipmentData.weight.toString()],
        ['Volume (cbm)', shipmentData.volume.toString()],
        ['Category', shipmentData.category],
        ['Deadline', deadline ? format(deadline, 'PPP') : 'Not specified']
      ],
      theme: 'grid'
    });
    
    // Add selected forwarders
    const forwarderY = (doc as any).lastAutoTable.finalY + 10;
    doc.text('Selected Forwarders', 14, forwarderY);
    
    const selectedForwarderNames = availableForwarders
      .filter(forwarder => selectedForwarders.includes(forwarder.id))
      .map(forwarder => [forwarder.name, `${(forwarder.reliability * 100).toFixed(0)}%`]);
    
    autoTable(doc, {
      startY: forwarderY + 5,
      head: [['Forwarder', 'Reliability']],
      body: selectedForwarderNames,
      theme: 'grid'
    });
    
    // Add footer
    const footerY = (doc as any).lastAutoTable.finalY + 15;
    doc.setFontSize(10);
    doc.text('Generated by DeepCAL Operations Center', 105, footerY, { align: 'center' });
    
    return doc;
  };

  const handleDownloadPDF = () => {
    const doc = generatePDF();
    doc.save(`RFQ_${shipmentData.reference}_${format(new Date(), 'yyyy-MM-dd')}.pdf`);
    
    toast({
      title: "PDF Downloaded",
      description: "The RFQ has been downloaded as a PDF document."
    });
  };

  const handleOpenEmailDialog = () => {
    setIsEmailDialogOpen(true);
  };

  const handleSendEmail = async () => {
    // Email validation
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(recipientEmail)) {
      toast({
        title: "Invalid Email",
        description: "Please enter a valid email address",
        variant: "destructive"
      });
      return;
    }
    
    setIsSendingEmail(true);
    
    try {
      // In a real implementation, you would:
      // 1. Convert the PDF to base64
      // 2. Send the base64 to a backend service
      // 3. Have the backend send the email with the PDF attachment
      
      // For this demo, we'll simulate sending
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      toast({
        title: "Email Sent",
        description: `The RFQ has been sent to ${recipientEmail}`
      });
      
      setIsEmailDialogOpen(false);
      setRecipientEmail('');
    } catch (error) {
      console.error('Error sending email:', error);
      toast({
        title: "Error",
        description: "Failed to send the email. Please try again later.",
        variant: "destructive"
      });
    } finally {
      setIsSendingEmail(false);
    }
  };

  if (submitted) {
    return (
      <div className="bg-card border rounded-lg p-6">
        <div className="text-center">
          <div className="mx-auto flex h-12 w-12 items-center justify-center rounded-full bg-green-100">
            <Check className="h-6 w-6 text-green-600" />
          </div>
          <h3 className="mt-4 text-lg font-medium">RFQ Successfully Created</h3>
          <p className="mt-2 text-sm text-muted-foreground">
            Your request for quotation has been sent to {selectedForwarders.length} forwarders.
            You will be notified when they respond.
          </p>
          <div className="mt-6 flex justify-center space-x-4">
            <Button className="flex items-center" variant="outline" onClick={handleDownloadPDF}>
              <FileDown className="mr-2 h-4 w-4" />
              Download RFQ
            </Button>
            <Button className="flex items-center" variant="outline" onClick={handleOpenEmailDialog}>
              <Mail className="mr-2 h-4 w-4" />
              Email RFQ
            </Button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <>
      <div className="bg-card border rounded-lg p-6">
        <h3 className="text-xl font-medium mb-6">Request for Quotation</h3>
        
        <form onSubmit={handleSubmit}>
          <div className="space-y-6">
            {/* Shipment Details Section */}
            <div>
              <h4 className="font-medium text-sm text-muted-foreground mb-4">SHIPMENT DETAILS</h4>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label>Reference</Label>
                  <Input value={shipmentData.reference} readOnly />
                </div>
                <div>
                  <Label>Category</Label>
                  <Input value={shipmentData.category} readOnly />
                </div>
                <div>
                  <Label>Origin</Label>
                  <Input value={shipmentData.origin} readOnly />
                </div>
                <div>
                  <Label>Destination</Label>
                  <Input value={shipmentData.destination} readOnly />
                </div>
                <div>
                  <Label>Weight (kg)</Label>
                  <Input value={shipmentData.weight} readOnly />
                </div>
                <div>
                  <Label>Volume (cbm)</Label>
                  <Input value={shipmentData.volume} readOnly />
                </div>
              </div>
            </div>
            
            {/* Forwarders Section */}
            <div>
              <h4 className="font-medium text-sm text-muted-foreground mb-4">SELECT FORWARDERS</h4>
              <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-3">
                {availableForwarders.map(forwarder => (
                  <div 
                    key={forwarder.id}
                    className={cn(
                      "border rounded-lg p-3 cursor-pointer transition-colors",
                      selectedForwarders.includes(forwarder.id)
                        ? "border-primary bg-primary/5"
                        : "hover:bg-accent"
                    )}
                    onClick={() => handleForwarderToggle(forwarder.id)}
                  >
                    <div className="flex items-center justify-between">
                      <span className="font-medium">{forwarder.name}</span>
                      {selectedForwarders.includes(forwarder.id) && (
                        <Check className="h-4 w-4 text-primary" />
                      )}
                    </div>
                    <div className="text-xs text-muted-foreground mt-1">
                      Reliability: {(forwarder.reliability * 100).toFixed(0)}%
                    </div>
                  </div>
                ))}
              </div>
              {selectedForwarders.length === 0 && (
                <p className="text-sm text-destructive mt-2">
                  Please select at least one forwarder
                </p>
              )}
            </div>
            
            {/* Deadline Section */}
            <div>
              <h4 className="font-medium text-sm text-muted-foreground mb-4">QUOTE DEADLINE</h4>
              <Popover>
                <PopoverTrigger asChild>
                  <Button
                    variant="outline"
                    className={cn(
                      "w-full justify-start text-left font-normal",
                      !deadline && "text-muted-foreground"
                    )}
                  >
                    <CalendarIcon className="mr-2 h-4 w-4" />
                    {deadline ? format(deadline, 'PPP') : <span>Pick a date</span>}
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0 pointer-events-auto">
                  <CalendarComponent
                    mode="single"
                    selected={deadline}
                    onSelect={setDeadline}
                    initialFocus
                    disabled={(date) => date < new Date()}
                  />
                </PopoverContent>
              </Popover>
            </div>
            
            {/* Submit Button */}
            <Button 
              type="submit" 
              className="w-full"
              disabled={selectedForwarders.length === 0 || !deadline || isSubmitting}
            >
              {isSubmitting ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Processing...
                </>
              ) : (
                "Generate & Send RFQ"
              )}
            </Button>
          </div>
        </form>
      </div>

      {/* Email Dialog */}
      <Dialog open={isEmailDialogOpen} onOpenChange={setIsEmailDialogOpen}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Send RFQ as PDF</DialogTitle>
          </DialogHeader>
          <div className="py-4">
            <Label htmlFor="email" className="mb-2 block">Recipient Email</Label>
            <Input
              id="email"
              type="email"
              placeholder="recipient@example.com"
              value={recipientEmail}
              onChange={(e) => setRecipientEmail(e.target.value)}
            />
          </div>
          <DialogFooter>
            <Button 
              variant="secondary" 
              onClick={() => setIsEmailDialogOpen(false)}
              disabled={isSendingEmail}
            >
              Cancel
            </Button>
            <Button 
              onClick={handleSendEmail}
              disabled={!recipientEmail || isSendingEmail}
            >
              {isSendingEmail ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Sending...
                </>
              ) : (
                "Send Email"
              )}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </>
  );
};

export default RFQBuilder;
