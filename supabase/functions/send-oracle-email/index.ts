
// Edge function to send Oracle insight emails
import { serve } from "https://deno.land/std@0.190.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.38.0";

// Configure CORS headers
const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

interface EmailRequest {
  to: string;
  subject: string;
  content: string;  // Changed from htmlContent to content
  queryType?: string;
}

const handler = async (req: Request): Promise<Response> => {
  // Handle CORS preflight requests
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const supabaseClient = createClient(
      Deno.env.get("SUPABASE_URL") ?? "",
      Deno.env.get("SUPABASE_SERVICE_ROLE_KEY") ?? ""
    );
    
    // Get request body
    const { to, subject, content, queryType } = await req.json() as EmailRequest;
    
    if (!to || !content) {
      return new Response(
        JSON.stringify({ 
          success: false, 
          error: "Missing required fields: to, content" 
        }),
        { 
          status: 400,
          headers: { ...corsHeaders, "Content-Type": "application/json" } 
        }
      );
    }
    
    // Create HTML content from the provided content
    const htmlContent = `
      <!DOCTYPE html>
      <html>
        <head>
          <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }
            .header { background-color: #0A1A2F; color: #00FFD1; padding: 20px; border-radius: 5px 5px 0 0; text-align: center; }
            .content { padding: 20px; background-color: #f9f9f9; border: 1px solid #ddd; border-top: none; border-radius: 0 0 5px 5px; }
            .footer { text-align: center; margin-top: 20px; font-size: 0.8em; color: #666; }
            .oracle-insight { font-family: Georgia, serif; padding: 15px; background-color: #f0f0f0; border-left: 3px solid #00FFD1; margin-bottom: 20px; }
            table { border-collapse: collapse; width: 100%; margin-bottom: 20px; }
            th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
            th { background-color: #0A1A2F; color: #00FFD1; }
            tr:nth-child(even) { background-color: #f2f2f2; }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>Oracle Hut Insight</h1>
            <p>Symbolic Logistics Intelligence</p>
          </div>
          <div class="content">
            <p>Here's your requested logistics insight:</p>
            <div class="oracle-insight">
              ${content.replace(/\n/g, '<br>')}
            </div>
            <p>This insight was generated by the Oracle Hut symbolic engine, leveraging advanced logistics pattern recognition and historical shipment analysis.</p>
            <p>Query type: ${queryType || 'General logistics information'}</p>
          </div>
          <div class="footer">
            <p>Â© ${new Date().getFullYear()} Oracle Hut - Symbolic Logistics Intelligence</p>
            <p>This is an automated message. Please do not reply to this email.</p>
          </div>
        </body>
      </html>
    `;
    
    // Log this email in the audit trail (write-only)
    try {
      await supabaseClient
        .from('oracle_logs')
        .insert({
          user_query: `Email request: ${queryType || 'General insight'}`,
          oracle_response: content,
          timestamp: new Date().toISOString(),
          has_table: content.includes('|') && (content.includes('\n|') || content.includes('|-')),
          model_version: '1.0'
        });
    } catch (logError) {
      console.error("Failed to log email to audit trail:", logError);
      // Non-critical, continue with email sending
    }

    // Send email using Resend
    const resendApiKey = Deno.env.get("RESEND_API_KEY");
    if (!resendApiKey) {
      throw new Error("RESEND_API_KEY not set");
    }

    const emailResponse = await fetch("https://api.resend.com/emails", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${resendApiKey}`,
      },
      body: JSON.stringify({
        from: "Oracle Hut <oracle@resend.dev>",
        to: [to],
        subject: subject || "Oracle Hut: Logistics Insight",
        html: htmlContent,
      }),
    });

    const emailResult = await emailResponse.json();

    if (!emailResponse.ok) {
      console.error("Error sending email:", emailResult);
      throw new Error(`Failed to send email: ${JSON.stringify(emailResult)}`);
    }

    return new Response(
      JSON.stringify({ success: true, messageId: emailResult.id }),
      { headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );
    
  } catch (error) {
    console.error("Error in send-oracle-email function:", error);
    return new Response(
      JSON.stringify({ success: false, error: error.message }),
      { 
        status: 500, 
        headers: { ...corsHeaders, "Content-Type": "application/json" }
      }
    );
  }
};

serve(handler);
